/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ps.customer.event.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Audit extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8983918912788946052L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Audit\",\"namespace\":\"ps.customer.event.avro\",\"fields\":[{\"name\":\"requestIp\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"requestPort\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"origin\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"updateOrigin\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"changeAgent\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"input\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"deviceId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Audit> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Audit> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Audit> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Audit> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Audit> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Audit to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Audit from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Audit instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Audit fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence requestIp;
  private java.lang.CharSequence requestPort;
  private java.lang.CharSequence origin;
  private java.lang.CharSequence updateOrigin;
  private java.lang.CharSequence changeAgent;
  private java.lang.CharSequence input;
  private java.lang.CharSequence deviceId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Audit() {}

  /**
   * All-args constructor.
   * @param requestIp The new value for requestIp
   * @param requestPort The new value for requestPort
   * @param origin The new value for origin
   * @param updateOrigin The new value for updateOrigin
   * @param changeAgent The new value for changeAgent
   * @param input The new value for input
   * @param deviceId The new value for deviceId
   */
  public Audit(java.lang.CharSequence requestIp, java.lang.CharSequence requestPort, java.lang.CharSequence origin, java.lang.CharSequence updateOrigin, java.lang.CharSequence changeAgent, java.lang.CharSequence input, java.lang.CharSequence deviceId) {
    this.requestIp = requestIp;
    this.requestPort = requestPort;
    this.origin = origin;
    this.updateOrigin = updateOrigin;
    this.changeAgent = changeAgent;
    this.input = input;
    this.deviceId = deviceId;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return requestIp;
    case 1: return requestPort;
    case 2: return origin;
    case 3: return updateOrigin;
    case 4: return changeAgent;
    case 5: return input;
    case 6: return deviceId;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: requestIp = (java.lang.CharSequence)value$; break;
    case 1: requestPort = (java.lang.CharSequence)value$; break;
    case 2: origin = (java.lang.CharSequence)value$; break;
    case 3: updateOrigin = (java.lang.CharSequence)value$; break;
    case 4: changeAgent = (java.lang.CharSequence)value$; break;
    case 5: input = (java.lang.CharSequence)value$; break;
    case 6: deviceId = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'requestIp' field.
   * @return The value of the 'requestIp' field.
   */
  public java.lang.CharSequence getRequestIp() {
    return requestIp;
  }


  /**
   * Sets the value of the 'requestIp' field.
   * @param value the value to set.
   */
  public void setRequestIp(java.lang.CharSequence value) {
    this.requestIp = value;
  }

  /**
   * Gets the value of the 'requestPort' field.
   * @return The value of the 'requestPort' field.
   */
  public java.lang.CharSequence getRequestPort() {
    return requestPort;
  }


  /**
   * Sets the value of the 'requestPort' field.
   * @param value the value to set.
   */
  public void setRequestPort(java.lang.CharSequence value) {
    this.requestPort = value;
  }

  /**
   * Gets the value of the 'origin' field.
   * @return The value of the 'origin' field.
   */
  public java.lang.CharSequence getOrigin() {
    return origin;
  }


  /**
   * Sets the value of the 'origin' field.
   * @param value the value to set.
   */
  public void setOrigin(java.lang.CharSequence value) {
    this.origin = value;
  }

  /**
   * Gets the value of the 'updateOrigin' field.
   * @return The value of the 'updateOrigin' field.
   */
  public java.lang.CharSequence getUpdateOrigin() {
    return updateOrigin;
  }


  /**
   * Sets the value of the 'updateOrigin' field.
   * @param value the value to set.
   */
  public void setUpdateOrigin(java.lang.CharSequence value) {
    this.updateOrigin = value;
  }

  /**
   * Gets the value of the 'changeAgent' field.
   * @return The value of the 'changeAgent' field.
   */
  public java.lang.CharSequence getChangeAgent() {
    return changeAgent;
  }


  /**
   * Sets the value of the 'changeAgent' field.
   * @param value the value to set.
   */
  public void setChangeAgent(java.lang.CharSequence value) {
    this.changeAgent = value;
  }

  /**
   * Gets the value of the 'input' field.
   * @return The value of the 'input' field.
   */
  public java.lang.CharSequence getInput() {
    return input;
  }


  /**
   * Sets the value of the 'input' field.
   * @param value the value to set.
   */
  public void setInput(java.lang.CharSequence value) {
    this.input = value;
  }

  /**
   * Gets the value of the 'deviceId' field.
   * @return The value of the 'deviceId' field.
   */
  public java.lang.CharSequence getDeviceId() {
    return deviceId;
  }


  /**
   * Sets the value of the 'deviceId' field.
   * @param value the value to set.
   */
  public void setDeviceId(java.lang.CharSequence value) {
    this.deviceId = value;
  }

  /**
   * Creates a new Audit RecordBuilder.
   * @return A new Audit RecordBuilder
   */
  public static ps.customer.event.avro.Audit.Builder newBuilder() {
    return new ps.customer.event.avro.Audit.Builder();
  }

  /**
   * Creates a new Audit RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Audit RecordBuilder
   */
  public static ps.customer.event.avro.Audit.Builder newBuilder(ps.customer.event.avro.Audit.Builder other) {
    if (other == null) {
      return new ps.customer.event.avro.Audit.Builder();
    } else {
      return new ps.customer.event.avro.Audit.Builder(other);
    }
  }

  /**
   * Creates a new Audit RecordBuilder by copying an existing Audit instance.
   * @param other The existing instance to copy.
   * @return A new Audit RecordBuilder
   */
  public static ps.customer.event.avro.Audit.Builder newBuilder(ps.customer.event.avro.Audit other) {
    if (other == null) {
      return new ps.customer.event.avro.Audit.Builder();
    } else {
      return new ps.customer.event.avro.Audit.Builder(other);
    }
  }

  /**
   * RecordBuilder for Audit instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Audit>
    implements org.apache.avro.data.RecordBuilder<Audit> {

    private java.lang.CharSequence requestIp;
    private java.lang.CharSequence requestPort;
    private java.lang.CharSequence origin;
    private java.lang.CharSequence updateOrigin;
    private java.lang.CharSequence changeAgent;
    private java.lang.CharSequence input;
    private java.lang.CharSequence deviceId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ps.customer.event.avro.Audit.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.requestIp)) {
        this.requestIp = data().deepCopy(fields()[0].schema(), other.requestIp);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.requestPort)) {
        this.requestPort = data().deepCopy(fields()[1].schema(), other.requestPort);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.origin)) {
        this.origin = data().deepCopy(fields()[2].schema(), other.origin);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.updateOrigin)) {
        this.updateOrigin = data().deepCopy(fields()[3].schema(), other.updateOrigin);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.changeAgent)) {
        this.changeAgent = data().deepCopy(fields()[4].schema(), other.changeAgent);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.input)) {
        this.input = data().deepCopy(fields()[5].schema(), other.input);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.deviceId)) {
        this.deviceId = data().deepCopy(fields()[6].schema(), other.deviceId);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing Audit instance
     * @param other The existing instance to copy.
     */
    private Builder(ps.customer.event.avro.Audit other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.requestIp)) {
        this.requestIp = data().deepCopy(fields()[0].schema(), other.requestIp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.requestPort)) {
        this.requestPort = data().deepCopy(fields()[1].schema(), other.requestPort);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.origin)) {
        this.origin = data().deepCopy(fields()[2].schema(), other.origin);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.updateOrigin)) {
        this.updateOrigin = data().deepCopy(fields()[3].schema(), other.updateOrigin);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.changeAgent)) {
        this.changeAgent = data().deepCopy(fields()[4].schema(), other.changeAgent);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.input)) {
        this.input = data().deepCopy(fields()[5].schema(), other.input);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.deviceId)) {
        this.deviceId = data().deepCopy(fields()[6].schema(), other.deviceId);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'requestIp' field.
      * @return The value.
      */
    public java.lang.CharSequence getRequestIp() {
      return requestIp;
    }


    /**
      * Sets the value of the 'requestIp' field.
      * @param value The value of 'requestIp'.
      * @return This builder.
      */
    public ps.customer.event.avro.Audit.Builder setRequestIp(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.requestIp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'requestIp' field has been set.
      * @return True if the 'requestIp' field has been set, false otherwise.
      */
    public boolean hasRequestIp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'requestIp' field.
      * @return This builder.
      */
    public ps.customer.event.avro.Audit.Builder clearRequestIp() {
      requestIp = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'requestPort' field.
      * @return The value.
      */
    public java.lang.CharSequence getRequestPort() {
      return requestPort;
    }


    /**
      * Sets the value of the 'requestPort' field.
      * @param value The value of 'requestPort'.
      * @return This builder.
      */
    public ps.customer.event.avro.Audit.Builder setRequestPort(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.requestPort = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'requestPort' field has been set.
      * @return True if the 'requestPort' field has been set, false otherwise.
      */
    public boolean hasRequestPort() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'requestPort' field.
      * @return This builder.
      */
    public ps.customer.event.avro.Audit.Builder clearRequestPort() {
      requestPort = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'origin' field.
      * @return The value.
      */
    public java.lang.CharSequence getOrigin() {
      return origin;
    }


    /**
      * Sets the value of the 'origin' field.
      * @param value The value of 'origin'.
      * @return This builder.
      */
    public ps.customer.event.avro.Audit.Builder setOrigin(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.origin = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'origin' field has been set.
      * @return True if the 'origin' field has been set, false otherwise.
      */
    public boolean hasOrigin() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'origin' field.
      * @return This builder.
      */
    public ps.customer.event.avro.Audit.Builder clearOrigin() {
      origin = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'updateOrigin' field.
      * @return The value.
      */
    public java.lang.CharSequence getUpdateOrigin() {
      return updateOrigin;
    }


    /**
      * Sets the value of the 'updateOrigin' field.
      * @param value The value of 'updateOrigin'.
      * @return This builder.
      */
    public ps.customer.event.avro.Audit.Builder setUpdateOrigin(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.updateOrigin = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'updateOrigin' field has been set.
      * @return True if the 'updateOrigin' field has been set, false otherwise.
      */
    public boolean hasUpdateOrigin() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'updateOrigin' field.
      * @return This builder.
      */
    public ps.customer.event.avro.Audit.Builder clearUpdateOrigin() {
      updateOrigin = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'changeAgent' field.
      * @return The value.
      */
    public java.lang.CharSequence getChangeAgent() {
      return changeAgent;
    }


    /**
      * Sets the value of the 'changeAgent' field.
      * @param value The value of 'changeAgent'.
      * @return This builder.
      */
    public ps.customer.event.avro.Audit.Builder setChangeAgent(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.changeAgent = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'changeAgent' field has been set.
      * @return True if the 'changeAgent' field has been set, false otherwise.
      */
    public boolean hasChangeAgent() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'changeAgent' field.
      * @return This builder.
      */
    public ps.customer.event.avro.Audit.Builder clearChangeAgent() {
      changeAgent = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'input' field.
      * @return The value.
      */
    public java.lang.CharSequence getInput() {
      return input;
    }


    /**
      * Sets the value of the 'input' field.
      * @param value The value of 'input'.
      * @return This builder.
      */
    public ps.customer.event.avro.Audit.Builder setInput(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.input = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'input' field has been set.
      * @return True if the 'input' field has been set, false otherwise.
      */
    public boolean hasInput() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'input' field.
      * @return This builder.
      */
    public ps.customer.event.avro.Audit.Builder clearInput() {
      input = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'deviceId' field.
      * @return The value.
      */
    public java.lang.CharSequence getDeviceId() {
      return deviceId;
    }


    /**
      * Sets the value of the 'deviceId' field.
      * @param value The value of 'deviceId'.
      * @return This builder.
      */
    public ps.customer.event.avro.Audit.Builder setDeviceId(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.deviceId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'deviceId' field has been set.
      * @return True if the 'deviceId' field has been set, false otherwise.
      */
    public boolean hasDeviceId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'deviceId' field.
      * @return This builder.
      */
    public ps.customer.event.avro.Audit.Builder clearDeviceId() {
      deviceId = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Audit build() {
      try {
        Audit record = new Audit();
        record.requestIp = fieldSetFlags()[0] ? this.requestIp : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.requestPort = fieldSetFlags()[1] ? this.requestPort : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.origin = fieldSetFlags()[2] ? this.origin : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.updateOrigin = fieldSetFlags()[3] ? this.updateOrigin : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.changeAgent = fieldSetFlags()[4] ? this.changeAgent : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.input = fieldSetFlags()[5] ? this.input : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.deviceId = fieldSetFlags()[6] ? this.deviceId : (java.lang.CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Audit>
    WRITER$ = (org.apache.avro.io.DatumWriter<Audit>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Audit>
    READER$ = (org.apache.avro.io.DatumReader<Audit>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.requestIp == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.requestIp);
    }

    if (this.requestPort == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.requestPort);
    }

    if (this.origin == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.origin);
    }

    if (this.updateOrigin == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.updateOrigin);
    }

    if (this.changeAgent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.changeAgent);
    }

    if (this.input == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.input);
    }

    if (this.deviceId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.deviceId);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.requestIp = null;
      } else {
        this.requestIp = in.readString(this.requestIp instanceof Utf8 ? (Utf8)this.requestIp : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.requestPort = null;
      } else {
        this.requestPort = in.readString(this.requestPort instanceof Utf8 ? (Utf8)this.requestPort : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.origin = null;
      } else {
        this.origin = in.readString(this.origin instanceof Utf8 ? (Utf8)this.origin : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.updateOrigin = null;
      } else {
        this.updateOrigin = in.readString(this.updateOrigin instanceof Utf8 ? (Utf8)this.updateOrigin : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.changeAgent = null;
      } else {
        this.changeAgent = in.readString(this.changeAgent instanceof Utf8 ? (Utf8)this.changeAgent : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.input = null;
      } else {
        this.input = in.readString(this.input instanceof Utf8 ? (Utf8)this.input : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.deviceId = null;
      } else {
        this.deviceId = in.readString(this.deviceId instanceof Utf8 ? (Utf8)this.deviceId : null);
      }

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.requestIp = null;
          } else {
            this.requestIp = in.readString(this.requestIp instanceof Utf8 ? (Utf8)this.requestIp : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.requestPort = null;
          } else {
            this.requestPort = in.readString(this.requestPort instanceof Utf8 ? (Utf8)this.requestPort : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.origin = null;
          } else {
            this.origin = in.readString(this.origin instanceof Utf8 ? (Utf8)this.origin : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.updateOrigin = null;
          } else {
            this.updateOrigin = in.readString(this.updateOrigin instanceof Utf8 ? (Utf8)this.updateOrigin : null);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.changeAgent = null;
          } else {
            this.changeAgent = in.readString(this.changeAgent instanceof Utf8 ? (Utf8)this.changeAgent : null);
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.input = null;
          } else {
            this.input = in.readString(this.input instanceof Utf8 ? (Utf8)this.input : null);
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.deviceId = null;
          } else {
            this.deviceId = in.readString(this.deviceId instanceof Utf8 ? (Utf8)this.deviceId : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










